apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: deploy-pipeline
  namespace: argo-workflows
spec:
  entrypoint: deploy-pipeline
  serviceAccountName: argo-workflows-sa
  templates:
    - name: deploy-pipeline
      steps:
        - - name: clone-repo
            template: clone-repo

          - name: maven-build
            template: maven-build

          - name: clone-repository
            template: clone-repository
          
          - name: kaniko-build-push
            template: kaniko-build-push

          - name: update-values-yaml
            template: update-values-yaml

    - name: clone-repo
      container:
        image: "quay.io/opsmxpublic/opsmx-custom-binaries:kubectl-spin-cli-git-bash-jq-yq-argocd-v2"
        command: ["/bin/bash", "-c"]
        args:
          - |
            echo "Cloning repository and checking out branch..."
            git_url=$(echo $GIT_URL)
            git_branch=$(echo $GIT_BRANCH)
            git_username=$(echo $GIT_USERNAME)
            git_credentials=$(echo $GIT_TOKEN)
            
            echo "Git URL: ${git_url}"
            echo "Git Branch: ${git_branch}"
            echo "Git Username: ${git_username}"
            git config --global credential.helper store
            echo "/mnt/git-repo already exists, cleaning up..."
            rm -rf /mnt/git-repo
          
            echo "https://${git_username}:${git_credentials}@github.com" > /mnt/git-repo/.git-credentials
            git clone -b ${git_branch} ${git_url} /mnt/git-repo
            ls -l /mnt/git-repo  # Verify the Dockerfile is present here
            cd /mnt/git-repo
            git checkout ${git_branch}
        env:
          - name: GIT_URL
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: git-url
          - name: GIT_BRANCH
            value: "main"
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: git-username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: gittoken

    - name: maven-build
      container:
        image: "maven"
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Building project with Maven..."
            echo "Cloning repository and checking out branch..."
            git_url=$(echo $GIT_URL)
            git_branch=$(echo $GIT_BRANCH)
            git_username=$(echo $GIT_USERNAME)
            git_credentials=$(echo $GIT_TOKEN)
            
            echo "Git URL: ${git_url}"
            echo "Git Branch: ${git_branch}"
            echo "Git Username: ${git_username}"
            echo "Git Token: ${git_credentials}"
            
            git clone -b ${git_branch} ${git_url} /mnt/git-repo
            cd /mnt/git-repo/
            ls -ltra /mnt/git-repo

            #mvn clean install -X -e > maven-debug.log 2>&1
            #cat /mnt/git-repo/maven-debug.log
            
            mvn -B -DskipTests clean install -e > maven-debug.log 2>&1
            cat /mnt/git-repo/maven-debug.log

        env:
          - name: GIT_URL
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: git-url
          - name: GIT_BRANCH
            value: "main"
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: git-username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: gittoken

    - name: clone-repository
      container:
        image: ubuntu:latest  # A minimal image with Git available
        command: ["/bin/bash", "-c"]
        args:
          - |
            apt-get update && apt-get install -y git  # Install git
            echo "Cloning repository..."
            git clone https://github.com/NaveenBalagouni/deploy-pipeline.git /mnt/git-repo
            
            echo "Navigating to /mnt directory and listing contents..."
            cd /mnt  # Navigate to /mnt directory
            ls -l  # List the contents of /mnt
            echo "Now listing contents of /mnt/git-repo"
            ls -l /mnt/git-repo  # List files inside /mnt/git-repo to verify if Dockerfile exists
    - name: kaniko-build-push
      inputs:
        parameters:
          - name: docker-registry
            value: quay.io
          - name: docker-image
            value: opsmxpublic/baseline-issuegen
          - name: image-tag
            value: latest
      container:
        image: gcr.io/kaniko-project/executor:v1.9.0-debug
        imagePullPolicy: Always
        command: ["/kaniko/executor"]
        args:
          - "--context=/mnt/git-repo"  # Use the mounted path
          - "--dockerfile=/mnt/git-repo/Dockerfile"  # Path to the Dockerfile within the cloned repo
          - "--destination={{inputs.parameters.docker-registry}}/{{inputs.parameters.docker-image}}:{{inputs.parameters.image-tag}}"
            
         #   args:
          #[
           # "--context=github.com/NaveenBalagouni/deploy-pipeline.git",
          #  "--dockerfile=/mnt/git-repo/Dockerfile",
           # "--destination={{inputs.parameters.docker-registry}}/{{inputs.parameters.docker-image}}:{{inputs.parameters.image-tag}}"
          #]
            #/kaniko/executor --context=/mnt/git-repo --dockerfile=/mnt/git-repo/Dockerfile --destination={{inputs.parameters.docker-registry}}/{{inputs.parameters.docker-image}}:{{inputs.parameters.image-tag}}
             # --context=/mnt/git-repo \
              #--dockerfile=/mnt/git-repo/Dockerfile \
              #--destination={{inputs.parameters.docker-registry}}/{{inputs.parameters.docker-image}}:{{inputs.parameters.image-tag}}
        volumeMounts:
          - name: docker-config-volume
            mountPath: /kaniko/.docker/
      volumes:
        - name: docker-config-volume
          secret:
            secretName: docker-credentialsquay
            items:
              - key: .dockerconfigjson
                path: config.json

    - name: update-values-yaml
      container:
        image: "quay.io/opsmxpublic/opsmx-custom-binaries:kubectl-spin-cli-git-bash-jq-yq-argocd-v2"
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Cloning Git repository..."
            echo "GIT_URL: $GIT_URL"
            echo "GIT_BRANCH: $GIT_BRANCH"
            echo "GIT_USERNAME: $GIT_USERNAME"
            echo "GIT_TOKEN: $GIT_TOKEN"
            echo "GIT_EMAIL: $GIT_EMAIL"
            
            git_url=$GIT_URL
            git_branch=$GIT_BRANCH
            git_username=$GIT_USERNAME
            git_credentials=$GIT_TOKEN

            echo "Setting up Git credentials..."
            git config --global credential.helper store
            echo "https://${git_username}:${git_credentials}@github.com"

            echo "Cloning Git repository..."
            git clone ${git_url} /mnt/git-repo
            echo "Current directory: $(pwd)"
            ls -ltra /mnt/git-repo/
            
            echo "v1.0.0" > /mnt/git-repo/artifact  
            # Checking if artifact file exists
            image=$(cat /mnt/git-repo/artifact)
            echo "Image tag: $image"
            yq eval ".image = \"$image\"" -i /mnt/git-repo/values.yaml
            # Check the contents of values.yaml to verify the change
            cat /mnt/git-repo/values.yaml
           
            cd /mnt/git-repo
            echo "Pushing changes to GitHub..."
            # Set user details (make sure these are set correctly)
            git config user.name "$GIT_USERNAME"
            git config user.email "$GIT_EMAIL"
            git add /mnt/git-repo/values.yaml
            git commit -m "Update image tag in values.yaml"
            git push https://$GIT_USERNAME:$GIT_TOKEN@github.com/NaveenBalagouni/deploy-pipeline.git $GIT_BRANCH
            
        env:
          - name: GIT_URL
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: git-url
          - name: GIT_BRANCH
            value: "main"
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: git-username
          
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: gittoken 

          - name: GIT_EMAIL
            valueFrom:
              secretKeyRef:
                name: git-credentials
                key: git-email
